1. Function declaration and initializations

    This is implemented in the function c_token_fun(int pointer) in semantics.cpp
    It does this in four parts

    Note:
    Initially pointer is on int, if the line looks like:
        int scanner(bool hello)...

    a. first part is to add function to functionlist object 
    which has been initialized in symbol table class

        step1: it checks if the name of function is already present 
        in the list. If yes then it checks if it is a function initialization or 
        declaration using variable call in funclist object. 
        call of a function-> 0 (only declaration)
                          -> 1(also initialized)
        if same function name has only been declared then we allow multiple functions
        with the same otherwise we dont allow and throw an error.

        step2: we add the function as an object into the function list having following
        attributes,
            name (given by user), call (0), Vn, Vs, An, as
            Vn- number of variables
            Vs- starting point of variables.

    b.adding arguements to this function object

        step1: set start of arguement 'As' as pointer+2
        step2: find number of args using loop and set 'An'
        step3: if args not zero, then add them all as objects with 
        attributes: type, name and index

    c. and d. compile using risc-v and keep making risc-v code 

    case1: initialization
        step1: set call of function to 1 and 
        finding total num of variables using loop
        step2: if eof arrived prematurely, then throw error
        step3: Generate assembly wrt every single one of these variables
        and save all these registers in stack for later use also (scope)

    case2: declaration
        step1: call =0

    case 3: neither
        step1: throw an error saying that MISSING ; or { in function
    
Note: Fname is a global variable here that tracks the name of 
the current function being discussed and can be used by all functions

2. Variable declaration and initializations

    This is implemented in the function c_varDeclaration(int pointer) in semantics.cpp.
    Here we do 2 things:
    a. Add variable to variable list
    b. If its not terminated by a semicolon, then call the
    expression function.
    why?
    expression function handles EVERY single ALU computation.
    If there is an = sign you can bet you need this function.

Note: Here, we need to know which function the current variable is local to
or whether current variable is global. Hence we use the global variables:
Fname and track_fname to handle this.

3. function scope termination
    this is case 1 in c_rightBrace() in semantics.cpp

4. solving expressions
    this is done via expression() in semantics.cpp
    
expression includes all logical and arithmetic calculations, register 
assignment etc. e.g F = A + C;

In our parser, whenever sentence starts with single identifier, this func is called
Any sentence requiring ANY computation requires this.

We evaluate expressions via postfix expression rule.

    1.Postfix expression rule: In the operator stack: a lower precedence can NEVER
    sit on top of a higher precedence, thats the law. Also, = has the lowest 
    precedence so when we encounted in, everything is popped. 
    
    Also, when ) is encountered, we keep going as usual, and when ( is later encountered,
    we pop everything till (.

    To create the postfix expression, we go from the end of expression to start.

    2. our func: 
        step1- convert expression into postfix
        step1- 

    3. strings:
     strings can only appear in this form:
     a = "Hello World" ; 
     this is the only operation that our compiler supports. This is used to assign 
     string values to an identifier

    4. stepwise explaination:
        a.moves a pointer to end of expressin (-1)
        so for F=A+B; pointer is now at b

        c. assigns registers for all identifier, by calling 
        assignReg() function and adds all the nums, string and identifiers
        i.e. all operands into postfix expr

        c. checks for )8 and converts onto )*8 

        d.sign accomodation
            8*-5 = 8* (0-5)
            8/+5 = 8/5
        
        e. pushes operators onto stack according to postfix rule and
        created final postfix expression in st.expressList[]

        f. calls readExpressList(st.indexL, 0); to compile this expression
        thats now in postfix
        
5. assignment of registers
this is done via assignReg(int pointer) in semantics.cpp

    1. only accepts identifier whose register needs to be saved. Also, every identifier
    needs to have a register assigned to it.

    whenever a identifier is created/declared, our compiler gives it a special index 
    (all stored in symbol table)

    VVIMP-->
        However, in this func, the identifiers are coming from an Expression. So we have NO info
        about their type and their local idx, hence we search :
            localVarList
            GlobalVarList and
            ArgList 
        for this token and take the data from there (as an identifier will have to be in one
        of there 3 lists if its valid)

        Hence, during assignment of register, we put these type and local index ALSO into register

        basically:
                int F; 
                    symbol table stores type of f and gives it local idx
                int F= 5; or F=5; 
                    assignReg searches symbol table for type and local idx of F and allocates memory

6. Parsing the Postfix expression and identifying where operations can be done
and deleting extra elements after that operation is done
    done in readExpressList() in semantics.cpp, which recursively
    bring the expression down to just one element in the end

7. Reading Postfix Expression and Generation of Assembly for it

