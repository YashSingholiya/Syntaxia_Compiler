            CONTROL FLOW 
1. file_opener.cpp

Compiler starts working in file_opener.cpp

Here the file is scanned into a buffer and this
buffer is passed into the scanner function
    scanner(buffer);
located in scanner.cpp

2. scanner.cpp

This is the lexical analyzer. The whole file is scanned for tokens
of the type: Identifier and Keyword (Alphabet), Special Characters (charToken()),
Numbers, and finally Whitespaces which include lots of things like \n and ' ' etc
which are all skipped.

Now the makeToken function in the end makes a file of all the tokens and 
at the same time use the sendToParser function in semantics.cpp
    sendToParser(type, line);   or
    sendToParser(type, line, tokenData);
that creates a token table using 
class tokenClass, and as soon as EOF token is reached in by lexical analyzer in scanner.cpp
the sendToParser function calls the parse function 
    parse(1);
in parser.cpp that finally starts the parsing process.
Now the job of scanner.cpp is complete as it has also created a readable 
token list text file.


Note: Scanner.cpp is also responsible for one syntax/parse support:
counting if opening and closing brackets are matching. If they dont match 
then during scanning itself the error will be generated and compilation
is terminated

3. parser.cpp

Here the parsing happens, but that is not all, it also calls varrious functions
of semantics.cpp that basically do logic analizatoin like:
    is variable defined?
    is expression valid and what is it?
    ternary operation handling
    function call and
    functon declaration and so on.

Hence, this parser.cpp also forms the foundation of semantics while parsing the tokens
and doing its actual main task:
    checking if the syntax of the various token groups is correct. For this it uses:
    bool expect(TokenType typeA, int count);
    bool expect(TokenType typeA,TokenType typeB, int count); etc.
which are defined in semantics.cpp (?)

The parser basically encounters all the different tokens and 
differentiates them using if statements and the for each of them calls 
a semantic function.
semantic functions called here include:
    expression(pointer, TOKEN_SEMICOLON);
    c_varDeclaration(pointer);
    c_cout(pointer);
    c_while(pointer);  
    and so on

After this the semantic analysis begins.

4. semantics.cpp
This holds some of the most important responsibilities:

    a. it acts as a seantic check to see if already declared 
    names are used again

    b. it doesnt need to check order of variableas and basic syntax
    and parses just did all that using expect function
    So semantic analyzer can focus on other things

    c. This is also the Code Generator, as it generated the 
    output assembly code as we go along using codegenerate() 
    Note: we are compiling our code into risc-v assembly

    d.

