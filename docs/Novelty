1. Novelties in expression evaluation:
        a.automatically adds multiply sign in the expressions
        for ex. 7(A+3) is automatically treated as 7*(A+3)
        which would otherwise give an error in regular c++

        b.Sign accomodation:
            7*+3 = 7*3 and 9/+8 = 9/8 and so on in our compiler, so if you accidentally write 
            +3 instead of 3 it wont throw unnecessary errors

            Similarly even - sign is accomodated: 7*-3 is converted into 
            7* (0-3) into the internal expression so no errors are thrown

    Rest of features are same as commonly used compilers
    -postfix expression used 

    

2. Lexer also performs one syntax checking activity:
    it ensures that all braces match each other and for every open
    brace there is a close brace. Hence, there can be no brace 
    related issues when defining and updating the scope of various code blocks

3. Model Choice Novelties:
    a. We have chosen to enumerate all tokens in ordr of precedence as can be seem in
    parser.h , and this unique technique helps simplify lots of operations while 
    cutting down drastically on the computation time. 
     ex . to check if x is any operator, you can simply do
        if(x < TOKEN_LEFT_PAREN){...}
        as all operators (including unary ops) have lower precedence than
        TOKEN_LEFT_PAREN.
    Not many of the current compilers use this however as it imposes some constraints on token manipulation.

    b. Generates the Assembly code side by side with Semantic Analysis. Typical compilers 
    have different codeBlocks for this but we have chosen to fuse these for greater simplicity and most 
    importantly-> easier debugging.

4. Memory Management choices:
    1. We have chosen the following registers (and their respective counts):

    2. For arguement handling:
        In every function, first 5 arguement registers are reserved for functions that are defined 
        WITHIN this function. This way we dont have to push the main arguements into stack every time 
        we want to do something with the inner function arguements..
        hence boosting computation speed.

        This technique is used by very few commonly used compilers, which instead shift the main 
        function args into the local variable registers of the function...which is computationally
        most effective but also causes complex operations that can cause memory management bugs later on.
    
    3.following register array choices have been made to optimise the complexity of model with its 
    computational efficiency:
        local variables->{ "x9", "x18", "x19", "x20", "x21", "x22", "x23", "x24", "x25", "x26", "x27"}
        arithmetic instructions->{ "add","sub", "div","mod", "mul", "or", "xor", "and", "or",
                         "xor", "and", "sll", "srl", "not", "add", "sub", "div", "mod", "mul"};
        branch instructions->{ "ld", "0", "0", "bne","ble", "blt", "bge", "bgt", "beq"};
        arguements->{"x10", "x11", "x12", "x13", "x14", "x15", "x16", "x17"};
        global variables ->{"g8", "g9", "g18", "g19", "g20", "g21", "g22", "g23", "g24", "g25", "g26", "g27"}


note: pls ensure ordering of all class variables is correct